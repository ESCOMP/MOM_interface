#!/usr/bin/env python

"""
build mom library
"""
import sys, os, time, filecmp, shutil, imp, glob

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.buildlib import parse_input
from CIME.case import Case
from CIME.utils import run_cmd, expect

logger = logging.getLogger(__name__)

###############################################################################
def buildlib(caseroot, libroot, bldroot):
###############################################################################

    with Case(caseroot) as case:
        # first check for the external FMS library and build it
        srcroot = case.get_value("SRCROOT")
        fmsbuildlib = os.path.join(srcroot,"libraries","FMS","buildlib")
        fmsbuilddir = os.path.join(bldroot,"FMS")
        if not os.path.exists(fmsbuildlib):
            #todo: call checkout_externals to get this component
            expect(False, "FMS external not found")
        else:
            stat, _, err = run_cmd("{} {} {} {}".format(fmsbuildlib, bldroot, fmsbuilddir, caseroot), verbose=True)
            expect(stat==0, "FMS build Failed {}".format(err))

        # todo:  Need to do the same with CVMix, for now I'm just pointing to the cvmix in pop
        momcvmix = os.path.join(srcroot,"components","mom","MOM6","pkg","CVMix-src")
        popcvmix = os.path.join(srcroot,"components","pop","externals","CVMix")
        if os.path.exists(popcvmix):
            cvmixdir = popcvmix
        else:
            tlcvmix = os.path.join(srcroot,"libraries","CVMix")
            cvmixdir = tlcvmix

        if not os.path.exists(os.path.join(momcvmix,"bin")):
            expect(os.path.exists(cvmixdir) or os.path.exists(tlcvmix), "Could not find CVMix in {} or {}"
                   .format(cvmixdir, tlcvmix))

            for _dir in glob.iglob(os.path.join(cvmixdir,"*")):
                dst = os.path.join(momcvmix,os.path.basename(_dir))
                logger.info("link {} to {}".format(_dir,dst))
                if not os.path.exists(dst):
                    os.symlink(_dir,dst)

        casetools = case.get_value("CASETOOLS")
        gmake_j = case.get_value("GMAKE_J")
        gmake = case.get_value("GMAKE")
        mach = case.get_value("MACH")

        #-------------------------------------------------------
        # create Filepath file for mom
        #-------------------------------------------------------
        sharedlibroot = case.get_value("SHAREDLIBROOT")

        incroot = " -I " + os.path.join(srcroot,"libraries","FMS","src","include") + \
                  " -I " + os.path.join(srcroot,"libraries","FMS","src","mpp","include") + \
                  " -I " + fmsbuilddir
        filepath_file = os.path.join(bldroot,"Filepath")
        if not os.path.isfile(filepath_file):
#todo: are these needed in mom or only for fms?
            driver = case.get_value("COMP_INTERFACE")+"_driver"
            os.environ["CPPDEFS"] = " -Duse_libMPI -Duse_netCDF -DSPMD"
            paths = [os.path.join(caseroot,"SourceMods","src.mom"),
                     os.path.join(srcroot,"components","mom","MOM6","config_src",driver),
                     os.path.join(srcroot,"components","mom","MOM6","config_src","dynamic"),
                     os.path.join(srcroot,"components","mom","MOM6","src","ALE"),
                     os.path.join(srcroot,"components","mom","MOM6","src","core"),
                     os.path.join(srcroot,"components","mom","MOM6","src","diagnostics"),
                     os.path.join(srcroot,"components","mom","MOM6","src","equation_of_state"),
                     os.path.join(srcroot,"components","mom","MOM6","src","equation_of_state","TEOS10"),
                     os.path.join(srcroot,"components","mom","MOM6","src","framework"),
                     os.path.join(srcroot,"components","mom","MOM6","src","ice_shelf"),
                     os.path.join(srcroot,"components","mom","MOM6","src","initialization"),
                     os.path.join(srcroot,"components","mom","MOM6","src","ocean_data_assim"),
                     os.path.join(srcroot,"components","mom","MOM6","src","ocean_data_assim", "core"),
                     os.path.join(srcroot,"components","mom","MOM6","src","ocean_data_assim", "geoKdTree"),
                     os.path.join(srcroot,"components","mom","MOM6","src","parameterizations","CVmix"),
                     os.path.join(srcroot,"components","mom","MOM6","src","parameterizations","lateral"),
                     os.path.join(srcroot,"components","mom","MOM6","src","parameterizations","vertical"),
                     os.path.join(srcroot,"components","mom","MOM6","src","tracer"),
                     os.path.join(srcroot,"components","mom","MOM6","src","user")]

            with open(filepath_file, "w") as filepath:
                filepath.write("\n".join(paths))
                filepath.write("\n")
        libfms = os.path.join(bldroot,"FMS","libfms.a")
        if os.path.exists(libfms):
            shutil.copy(libfms, libroot)
            # filenames = glob.glob("*.mod")
            # for filename in filenames:
            #     shutil.copy(filename, os.path.join(libroot,"include"))

        os.chdir(bldroot)

        # build the library
        makefile = os.path.join(casetools, "Makefile")
        complib = os.path.join(libroot,"libocn.a")
        cmd = "{} complib -j {} MODEL=mom COMPLIB={} -f {} INCROOT=\"{}\"" .format(gmake, gmake_j, complib, makefile, incroot)

        rc, out, err = run_cmd(cmd)
        logger.info("%s: \n\n output:\n %s \n\n err:\n\n%s\n"%(cmd,out,err))
        expect(rc == 0, "Command %s failed with rc=%s" % (cmd, rc))


def _main_func():
    caseroot, libroot, bldroot = parse_input(sys.argv)
    buildlib(caseroot, libroot, bldroot)

###############################################################################

if __name__ == "__main__":
    _main_func()
