#!/usr/bin/env python

"""MOM6 namelist creator
"""

# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os, shutil, sys, glob, stat, filecmp, imp

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

# The scope of the following path expansion is limited to this script only,
# and is needed to import MOM6 input file classes:
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)),"MOM_RPS"))

from standard_script_setup import *
from CIME.case import Case
from CIME.nmlgen import NamelistGenerator
from CIME.utils import expect
from CIME.buildnml import create_namelist_infile, parse_input
from CIME.utils import run_cmd
from FType_MOM_params import FType_MOM_params
from FType_input_nml import FType_input_nml
from FType_input_data_list import FType_input_data_list
from FType_diag_table import FType_diag_table

logger = logging.getLogger(__name__)

def prep_input(case):
    """ Stages MOM6 input files by calling the appropriate MOM_RPS functions. """

    Buildconf       = case.get_value("CASEBUILD")
    rundir          = case.get_value("RUNDIR")
    comp_root_dir_ocn = case.get_value("COMP_ROOT_DIR_OCN")
    srcroot         = case.get_value("SRCROOT")
    ocn_bgc_config  = case.get_value("OCN_BGC_CONFIG")
    caseroot        = case.get_value("CASEROOT")
    ocn_grid        = case.get_value("OCN_GRID")
    run_type        = case.get_value("RUN_TYPE")
    continue_run    = case.get_value("CONTINUE_RUN")

    # Make sure that rundir exists. If not, make it:
    if not os.path.exists(rundir):
        os.makedirs(rundir)

    # Parse json files and create MOM6 input files in rundir
    json_templates_dir = os.path.join(comp_root_dir_ocn,"param_templates","json")

    # Create MOM_input:
    MOM_input_src = os.path.join(json_templates_dir, "MOM_input.json")
    MOM_input_dest = os.path.join(rundir,"MOM_input")
    MOM_input = FType_MOM_params.from_json(MOM_input_src)
    MOM_input.write(output_path=MOM_input_dest, output_format="MOM_input", case=case)

    # Create marbl_in
    if  ocn_bgc_config != "none":
        MARBL_dir = os.path.join(srcroot, "components", "mom", "MOM6", "pkg", "MARBL")
        from MARBL_settings import MARBL_settings_for_MOM
        MARBL_settings = MARBL_settings_for_MOM(MARBL_dir, caseroot, ocn_grid, run_type,
                                                continue_run, ocn_bgc_config)
        MARBL_settings.write_settings_file(os.path.join(rundir, "marbl_in"))

    # Create input.nml:
    input_nml_src = os.path.join(json_templates_dir, "input_nml.json")
    input_nml_dest = os.path.join(rundir,"input.nml")
    input_nml = FType_input_nml.from_json(input_nml_src)
    input_nml.write(input_nml_dest, case)

    # Create mom.input_data_list:
    input_data_list_src = os.path.join(json_templates_dir, "input_data_list.json")
    input_data_list_dest = os.path.join(Buildconf,"mom.input_data_list")
    input_data_list = FType_input_data_list.from_json(input_data_list_src)
    input_data_list.write(input_data_list_dest, case)

    # Create diag_table:
    diag_table_src = os.path.join(json_templates_dir, "diag_table.json")
    diag_table_dest = os.path.join(rundir,"diag_table")
    diag_table = FType_diag_table.from_json(diag_table_src)
    diag_table.write(diag_table_dest, case)

    # Create an empty MOM_override:
    with open(os.path.join(rundir,"MOM_override"), 'w') as MOM_override:
        MOM_override.write(\
            '! WARNING: DO NOT EDIT this file! Any user change made in this file will be\n'+\
            '!          overriden. This file is automatically generated. MOM6 parameter\n'+\
            '!          changes may be made via SourceMods or user_nl_mom.\n'+\
            '!-------------------------------------------------------------------------\n\n')


def process_SourceMods(case):
    """ Copies MOM6 input files from CASEROOT/SourceMods/src.mom to RUNDIR."""

    caseroot = case.get_value("CASEROOT")
    rundir   = case.get_value("RUNDIR")
    replaceable = ["diag_table", "input.nml", "MOM_input", "MOM_override"]

    # If an input file normally copied from the templates directory is also provided by the user
    # in SourceMods/src.mom/, copy the version provided by the user in SourceMods.src.mom into
    # RUNDIR and so overwrite the default file.
    SourceMods_dir = os.path.join(caseroot,"SourceMods","src.mom")
    for filename in os.listdir(SourceMods_dir):
        if filename in replaceable:
            run_cmd("cp "+os.path.join(SourceMods_dir,filename)+" "+rundir)


def process_user_nl_mom(case):
    """ Calls the appropriate MOM_RPS functions to parse user_nl_mom and create MOM_override."""
    caseroot = case.get_value("CASEROOT")
    rundir   = case.get_value("RUNDIR")

    user_nl_mom = FType_MOM_params.from_MOM_input(os.path.join(caseroot,"user_nl_mom"))

    # copy the user_nl_mom parameters into MOM_override:
    if len(user_nl_mom.data)>0:

        # check if a copy of MOM_override is provided in SourceMods:
        SourceMods_dir = os.path.join(caseroot,"SourceMods","src.mom")
        if "MOM_override" in os.listdir(SourceMods_dir):
            raise SystemExit("ERROR: Cannot provide parameter changes via both SourceMods and user_nl_mom!")

        # parse the MOM_input file staged in rundir:
        MOM_input_rundir = FType_MOM_params.from_MOM_input(os.path.join(rundir,"MOM_input"))

        # Write MOM_override (based on data from user_nl_mom)
        user_nl_mom.write(output_path = os.path.join(rundir,"MOM_override"),
                          output_format = "MOM_override",
                          def_params = MOM_input_rundir)

def _copy_files_to_momconf(case):
    """ Saves copies of MOM6 input files in momconf directory for the record."""
    caseroot = case.get_value("CASEROOT")
    rundir   = case.get_value("RUNDIR")
    momconfdir  = os.path.join(caseroot, "Buildconf", "momconf")
    if not os.path.isdir(momconfdir):
        os.makedirs(momconfdir)

    for filename in ["MOM_input", "MOM_override", "diag_table", "input.nml"]:
        shutil.copy(os.path.join(rundir,filename), momconfdir)


# pylint: disable=too-many-arguments,too-many-locals,too-many-branches,too-many-statements
###############################################################################
def buildnml(case, caseroot, compname):
###############################################################################
    """Build the MOM6 namelist """

    # Build the component namelist
    if compname != "mom":
        raise AttributeError

    # prepare all input files
    prep_input(case)

    # process the SourceMods
    process_SourceMods(case)

    # process user_nl_mom
    process_user_nl_mom(case)

    # save copies of input files in momconf
    _copy_files_to_momconf(case)

    return

###############################################################################
def _main_func():

    caseroot = parse_input(sys.argv)
    with Case(caseroot) as case:
        buildnml(case, caseroot, "mom")

if __name__ == "__main__":
    _main_func()
