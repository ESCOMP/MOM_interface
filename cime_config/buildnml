#!/usr/bin/env python3

"""MOM6 namelist creator
"""

# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os, shutil, sys

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

# The scope of the following path expansion is limited to this script only,
# and is needed to import MOM6 input file classes:
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)),"MOM_RPS"))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)),"MARBL_scripts"))

from standard_script_setup import *
from CIME.case import Case
from CIME.buildnml import parse_input
from CIME.utils import run_cmd, append_status
from FType_MOM_params import FType_MOM_params
from FType_input_nml import FType_input_nml
from FType_input_data_list import FType_input_data_list
from FType_diag_table import FType_diag_table

logger = logging.getLogger(__name__)

def prep_input(case):
    """ Generates out-of-the-box versions of MOM6 input files including MOM_input, MOM_override, diag_table
    input.nml, and mom.input_data_list, inside the run directory. If any of these input files are provided
    in SourceMods, those versions will be copied to run directory instead."""

    Buildconf = case.get_value("CASEBUILD")
    rundir = case.get_value("RUNDIR")
    comp_root_dir_ocn = case.get_value("COMP_ROOT_DIR_OCN")
    srcroot         = case.get_value("SRCROOT")
    ocn_bgc_config  = case.get_value("OCN_BGC_CONFIG")
    vert_grid       = case.get_value("OCN_BGC_HIST_VERT_GRID")
    caseroot        = case.get_value("CASEROOT")
    ocn_grid        = case.get_value("OCN_GRID")
    run_type        = case.get_value("RUN_TYPE")
    continue_run    = case.get_value("CONTINUE_RUN")
    ice_ncat        = case.get_value("ICE_NCAT")
    momconfdir  = os.path.join(caseroot, "Buildconf", "momconf")
    SourceMods_dir = os.path.join(caseroot,"SourceMods","src.mom")

    # Make sure that rundir exists. If not, make it:
    if not os.path.exists(rundir):
        os.makedirs(rundir)

    # Parse json files and create MOM6 input files in rundir
    json_templates_dir = os.path.join(comp_root_dir_ocn,"param_templates","json")

    # 1. Create MOM_input:
    if "MOM_input" in os.listdir(SourceMods_dir):
        run_cmd("cp "+os.path.join(SourceMods_dir,"MOM_input")+" "+rundir)
    else:
        MOM_input_src = os.path.join(json_templates_dir, "MOM_input.json")
        MOM_input_dest = os.path.join(rundir,"MOM_input")
        MOM_input = FType_MOM_params.from_json(MOM_input_src)
        MOM_input.write(output_path=MOM_input_dest, output_format="MOM_input", case=case)

    # 2. Create MOM_override:
    user_nl_mom = FType_MOM_params.from_MOM_input(os.path.join(caseroot,"user_nl_mom"))
    if "MOM_override" in os.listdir(SourceMods_dir):
        assert len(user_nl_mom.data)==0, "Cannot provide parameter changes via both SourceMods and user_nl_mom!"
        run_cmd("cp "+os.path.join(SourceMods_dir,"MOM_override")+" "+rundir)
    else:
        init_MOM_override(rundir)
        process_user_nl_mom(case)

    # 3. Read in final versions of MOM_input and MOM_override, so as to use them when inferring
    #    values of expandable variables in the templates of below MOM6 input files.
    MOM_input_final = FType_MOM_params.from_MOM_input(os.path.join(rundir,"MOM_input"))
    MOM_override_final = FType_MOM_params.from_MOM_input(os.path.join(rundir,"MOM_override"))
    MOM_input_final.append(MOM_override_final)
    # Need to know value of USE_MARBL_TRACERS from MOM_input
    try:
        use_MARBL = (MOM_input_final._data["Global"]["USE_MARBL_TRACERS"]["value"].strip().lower() == "true")
    except:
        print("NOTE: could not find USE_MARBL_TRACERS in MOM_input_final")
        use_MARBL = False

    # coupler should pass per-category ice fraction and shortwave if running with MARBL
    # calling set_value will() also change the value in env_run.xml; we only do that
    # if the value needs to be updated
    CPL_I2O_PER_CAT_curr = case.get_value("CPL_I2O_PER_CAT") # returns python logical, not string
    CPL_I20_PER_CAT_new = (ice_ncat>0 and use_MARBL)
    if (CPL_I2O_PER_CAT_curr != CPL_I20_PER_CAT_new):
        case.set_value("CPL_I2O_PER_CAT", CPL_I20_PER_CAT_new)
        append_status(f"xmlchange via MOM buildnml: CPL_I2O_PER_CAT={CPL_I20_PER_CAT_new}",
                      "CaseStatus")


    # 4. Create input.nml:
    if "input.nml" in os.listdir(SourceMods_dir):
        run_cmd("cp "+os.path.join(SourceMods_dir,"input.nml")+" "+rundir)
    else:
        input_nml_src = os.path.join(json_templates_dir, "input_nml.json")
        input_nml_dest = os.path.join(rundir,"input.nml")
        input_nml = FType_input_nml.from_json(input_nml_src)
        input_nml.write(input_nml_dest, case)

    # 5. Create mom.input_data_list:
    input_data_list_src = os.path.join(json_templates_dir, "input_data_list.json")
    input_data_list_dest = os.path.join(Buildconf,"mom.input_data_list")
    input_data_list = FType_input_data_list.from_json(input_data_list_src)
    input_data_list.write(input_data_list_dest, case, MOM_input_final)

    # 6. Create marbl_in (if case is set up with ocean BGC)
    if  use_MARBL:
        MARBL_dir = os.path.join(srcroot, "components", "mom", "MOM6", "pkg", "MARBL")
        from MARBL_settings import MARBL_settings_for_MOM
        MARBL_settings = MARBL_settings_for_MOM(MARBL_dir, caseroot, ocn_grid, run_type,
                                                continue_run, ocn_bgc_config)
        MARBL_settings.write_settings_file(os.path.join(rundir, "marbl_in"))

    # 7. Create diag_table:
    if "diag_table" in os.listdir(SourceMods_dir):
        run_cmd("cp "+os.path.join(SourceMods_dir,"diag_table")+" "+rundir)
    else:
        diag_table_src = os.path.join(json_templates_dir, "diag_table.json")
        diag_table_dest = os.path.join(rundir,"diag_table")
        diag_table = FType_diag_table.from_json(diag_table_src)
        if use_MARBL:
            # Make sure that momconfdir exists. If not, make it:
            if not os.path.exists(momconfdir):
                os.makedirs(momconfdir)
            diag_table_buildconf = os.path.join(momconfdir, "diag_table_MARBL.json")
            # For now, user has no control over lMARBL_output_all
            # TODO: mimic what is done in POP and allow it via user_nl_mom?
            lMARBL_output_all = case.get_value("TEST")
            # Include ALT_CO2 diagnostics if atm_co2_opt and atm_alt_co2_opt differ
            # (or if they are both "constant" but atm_co2_const != atm_alt_co2_const)
            atm_co2_opt = MOM_input_final._data["Global"]["ATM_CO2_OPT"]["value"].strip().lower().replace('"', '')
            try:
                atm_alt_co2_opt = MOM_input_final._data["Global"]["ATM_ALT_CO2_OPT"]["value"].strip().lower().replace('"', '')
            except:
                atm_alt_co2_opt = "constant"
            if (atm_co2_opt == atm_alt_co2_opt):
                if atm_co2_opt == "constant":
                    lMARBL_output_alt_co2 = (MOM_input_final._data["Global"]["ATM_CO2_CONST"]["value"] !=
                                             MOM_input_final._data["Global"]["ATM_ALT_CO2_CONST"]["value"])
                else:
                    lMARBL_output_alt_co2 = False
            else:
                lMARBL_output_alt_co2 = True
            generate_diag_table_MARBL(caseroot, MARBL_settings, SourceMods_dir, momconfdir, MARBL_dir,
                                      diag_table_buildconf, vert_grid, lMARBL_output_all, lMARBL_output_alt_co2,
                                       ice_ncat)
            if os.path.isfile(diag_table_buildconf):
                diag_table.append(FType_diag_table.from_json(diag_table_buildconf))
        diag_table.write(diag_table_dest, case, MOM_input_final)

def init_MOM_override(rundir):
    # Create an empty MOM_override:
    with open(os.path.join(rundir,"MOM_override"), 'w') as MOM_override:
        MOM_override.write(\
            '! WARNING: DO NOT EDIT this file! Any user change made in this file will be\n'+\
            '!          overriden. This file is automatically generated. MOM6 parameter\n'+\
            '!          changes may be made via SourceMods or user_nl_mom.\n'+\
            '!-------------------------------------------------------------------------\n\n')

def process_user_nl_mom(case):
    """ Calls the appropriate MOM_RPS functions to parse user_nl_mom and create MOM_override."""
    caseroot = case.get_value("CASEROOT")
    rundir   = case.get_value("RUNDIR")

    user_nl_mom = FType_MOM_params.from_MOM_input(os.path.join(caseroot,"user_nl_mom"))

    # copy the user_nl_mom parameters into MOM_override:
    if len(user_nl_mom.data)>0:

        # check if a copy of MOM_override is provided in SourceMods:
        SourceMods_dir = os.path.join(caseroot,"SourceMods","src.mom")
        if "MOM_override" in os.listdir(SourceMods_dir):
            raise SystemExit("ERROR: Cannot provide parameter changes via both SourceMods and user_nl_mom!")

        # parse the MOM_input file staged in rundir:
        MOM_input_rundir = FType_MOM_params.from_MOM_input(os.path.join(rundir,"MOM_input"))

        # Write MOM_override (based on data from user_nl_mom)
        user_nl_mom.write(output_path = os.path.join(rundir,"MOM_override"),
                          output_format = "MOM_override",
                          def_params = MOM_input_rundir)

def _copy_files_to_momconf(case):
    """ Saves copies of MOM6 input files in momconf directory for the record."""
    caseroot = case.get_value("CASEROOT")
    rundir   = case.get_value("RUNDIR")
    momconfdir  = os.path.join(caseroot, "Buildconf", "momconf")
    if not os.path.isdir(momconfdir):
        os.makedirs(momconfdir)

    for filename in ["MOM_input", "MOM_override", "diag_table", "input.nml"]:
        shutil.copy(os.path.join(rundir,filename), momconfdir)

def generate_diag_table_MARBL(caseroot, MARBL_settings, SourceMods_dir, momconfdir, MARBL_dir, diag_table_buildconf,
                              vert_grid, lMARBL_output_all, lMARBL_output_alt_co2, ice_ncat):
    """
    Create Buildconf/momconf/diag_table_MARBL.json

    If diag_table_MARBL.json is in SourceMods, use that version.
    Otherwise, generate it from Buildconf/momconf/ecosys_diagnostics
    (If ecosys_diagnostics is in SourceMods, use that version instead.)
    """
    # 1. Check for diag_table_MARBL.json in SourceMods
    srcmods_version = os.path.join(SourceMods_dir, "diag_table_MARBL.json")
    if os.path.isfile(srcmods_version):
        shutil.copy(srcmods_version, diag_table_buildconf)
        return

    # 2. Create ecosys_diagnostics
    #    (a) We need to generate a MARBL_diagnostics_for_MOM object
    #        It's necessary for generating ecosys_diagnostics, but
    #        even if we copy ecosys_diagnostics from SourceMods the
    #        object contains important information about the vertical
    #        dimension of MARBL's diagnostics
    from MARBL_diagnostics import MARBL_diagnostics_for_MOM
    MARBL_diagnostics = MARBL_diagnostics_for_MOM(MARBL_dir, caseroot, MARBL_settings)

    #    (b) Check for file in SourceMods, otherwise generate it
    srcmods_version = os.path.join(SourceMods_dir, "ecosys_diagnostics")
    ecosys_diags_buildconf = os.path.join(momconfdir, "ecosys_diagnostics")
    if os.path.isfile(srcmods_version):
        shutil.copy(srcmods_version, ecosys_diags_buildconf)
    else:
        # (i) Create ecosys_diagnostics with MOM-generated diagnostics
        from MOM_ecosys_diagnostics import write_ecosys_diagnostics_file
        MOM6_diags = write_ecosys_diagnostics_file(MARBL_settings.get_tracer_names(),
                                                   MARBL_settings.get_autotroph_names(),
                                                   MARBL_settings.get_zooplankton_names(),
                                                   MARBL_settings.get_autotroph_names(calcifier_only=True),
                                                   MARBL_settings.ladjust_bury_coeff(),
                                                   ecosys_diags_buildconf,
                                                   ice_ncat
                                                  )
        # (ii) append MARBL diagnostics to ecosys_diagnostics
        MARBL_diagnostics.write_diagnostics_file(ecosys_diags_buildconf,
                                                append=True)

    # 3. We need a list of all the 2D fields in ecosys_diagnostics
    #    because those fields use the ocean_model module rather than
    #    ocean_model_z

    #    (a) get list of 2D diagnostics computed in MOM6
    from MOM_ecosys_diagnostics import get_2D_vars_from_ecosys_diagnostics
    diag2D_list = get_2D_vars_from_ecosys_diagnostics(ecosys_diags_buildconf)

    #    (b) append list of 2D diagnostics computed in MARBL
    for varname in MARBL_diagnostics.MARBL_diagnostic_dict.diagnostics_dict:
        if MARBL_diagnostics.MARBL_diagnostic_dict.diagnostics_dict[varname]["vertical_grid"] == "none":
            diag2D_list.append(varname)

    # 4. Generate diag_table based on contents of ecosys_diagnostics
    #    and knowledge of which diags are 2D
    from MARBL_diags_to_diag_table import diagnostics_to_diag_table
    diagnostics_to_diag_table(ecosys_diags_buildconf, diag_table_buildconf, diag2D_list, vert_grid,
                              lMARBL_output_all, lMARBL_output_alt_co2)


# pylint: disable=unused-argument
###############################################################################
def buildnml(case, caseroot, compname):
###############################################################################
    """Build the MOM6 namelist """

    # Build the component namelist
    if compname != "mom":
        raise AttributeError

    # prepare all input files
    prep_input(case)

    # save copies of input files in momconf
    _copy_files_to_momconf(case)

    return

###############################################################################

def _main_func():

    caseroot = parse_input(sys.argv)
    with Case(caseroot) as case:
        buildnml(case, caseroot, "mom")

if __name__ == "__main__":
    _main_func()
