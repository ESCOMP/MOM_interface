#!/usr/bin/env python3

"""MOM6 namelist creator
"""

# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os, shutil, sys, re
import logging

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

# The scope of the following path expansion is limited to this script only,
# and is needed to import MOM6 input file classes:
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), "MOM_RPS"))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), "MARBL_scripts"))

from standard_script_setup import *
from CIME.case import Case
from CIME.utils import expect
from CIME.status import append_status
from CIME.buildnml import parse_input
from FType_MOM_params import FType_MOM_params
from FType_input_nml import FType_input_nml
from FType_input_data_list import FType_input_data_list
from FType_diag_table import FType_diag_table
from MARBL_settings import MARBL_settings_for_MOM
from MARBL_diagnostics import MARBL_diagnostics_for_MOM
from MOM_MARBL_diagnostics import write_MARBL_diagnostics_file, get_2D_vars_from_MARBL_diagnostics
from MARBL_diags_to_diag_table import diagnostics_to_diag_table
from tools.utils import MOM_define_layout, mpp_compute_extent

logger = logging.getLogger(__name__)


def prep_input(case, inst_suffixes):
    """Generates out-of-the-box versions of MOM6 input files including MOM_input, MOM_override, diag_table
    input.nml, and mom.input_data_list, inside the run directory. If any of these input files are provided
    in SourceMods, those versions will be copied to run directory instead."""

    Buildconf = case.get_value("CASEBUILD")
    comp_root_dir_ocn = case.get_value("COMP_ROOT_DIR_OCN")
    caseroot = case.get_value("CASEROOT")
    casename = case.get_value("CASE")
    rundir = case.get_value("RUNDIR")
    momconfdir = os.path.join(caseroot, "Buildconf", "momconf")
    SourceMods_dir = os.path.join(caseroot, "SourceMods", "src.mom")
    SourceMods_listdir = os.listdir(SourceMods_dir)
    srcroot = case.get_value("SRCROOT")
    ocn_grid = case.get_value("OCN_GRID")
    run_type = case.get_value("RUN_TYPE")
    continue_run = case.get_value("CONTINUE_RUN")
    ice_ncat = case.get_value("ICE_NCAT")
    marbl_diag_mode = case.get_value("MARBL_DIAG_MODE")
    multi_instance = inst_suffixes[0] != ""

    if multi_instance:
        infra_api = case.get_value("MOM6_INFRA_API")
        expect(
            infra_api != "FMS1",
            "Cannot run with FMS1 infra API when multi-instance mode is enabled.",
        )

    # Make sure that rundir and momconf directories exist. If not, make them:
    if not os.path.exists(rundir):
        os.makedirs(rundir)
    if not os.path.exists(momconfdir):
        os.makedirs(momconfdir)

    # Parse json files and create MOM6 input files in rundir
    json_templates_dir = os.path.join(comp_root_dir_ocn, "param_templates", "json")

    # 1. Create MOM_input:
    MOM_input_template = os.path.join(json_templates_dir, "MOM_input.json")
    MOM_input_rundir = os.path.join(rundir, f"MOM_input{inst_suffixes[0]}")
    if multi_instance:
        # don't allow separate MOM_input files for separate instances
        assert not any(
            [re.match("MOM_input_+\d", filename) for filename in SourceMods_listdir]
        ), "Cannot provide separate instances of MOM_input"
    if "MOM_input" in SourceMods_listdir:
        shutil.copy(os.path.join(SourceMods_dir, "MOM_input"), MOM_input_rundir)
    else:
        # Create MOM_input in rundir using template
        MOM_input = FType_MOM_params.from_json(MOM_input_template)
        MOM_input.write(
            output_path=MOM_input_rundir, output_format="MOM_input", case=case
        )
    # If multi-instance, create MOM_input copies for each instance
    for inst_suffix in inst_suffixes[1:]:
        shutil.copy(MOM_input_rundir, os.path.join(rundir, f"MOM_input{inst_suffix}"))

    # 2. Create MOM_override:
    for inst_suffix in inst_suffixes:
        user_nl_mom = FType_MOM_params.from_MOM_input(
            os.path.join(caseroot, f"user_nl_mom{inst_suffix}")
        )
        if f"MOM_override{inst_suffix}" in SourceMods_listdir:
            assert (
                len(user_nl_mom.data) == 0
            ), "Cannot provide parameter changes via both SourceMods and user_nl_mom!"
            shutil.copy(
                os.path.join(SourceMods_dir, f"MOM_override{inst_suffix}"),
                os.path.join(rundir, f"MOM_override{inst_suffix}"),
            )
        else:
            init_MOM_override(rundir, inst_suffix)
            process_user_nl_mom(case, inst_suffix)

    # 3. Read in final versions of MOM_input and MOM_override, so as to use them when inferring
    #    values of expandable variables in the templates of subsequent MOM6 input files.
    MOM_input_final = FType_MOM_params.from_MOM_input(MOM_input_rundir)
    MOM_override_final = FType_MOM_params.from_MOM_input(
        os.path.join(rundir, f"MOM_override{inst_suffixes[0]}")
    )
    MOM_input_final.append(MOM_override_final)
    # Need to know value of USE_MARBL_TRACERS from MOM_input
    if "USE_MARBL_TRACERS" in MOM_input_final._data["Global"]:
        use_MARBL = (MOM_input_final._data["Global"]["USE_MARBL_TRACERS"]["value"].strip().lower() == "true")
    else:
        print("NOTE: could not find USE_MARBL_TRACERS in MOM_input_final")
        use_MARBL = False

    # coupler should pass per-category ice fraction and shortwave if running with MARBL
    # calling set_value will() also change the value in env_run.xml; we only do that
    # if the value needs to be updated
    CPL_I2O_PER_CAT_curr = case.get_value("CPL_I2O_PER_CAT") # returns python logical, not string
    CPL_I20_PER_CAT_new = (ice_ncat>0 and use_MARBL)
    if (CPL_I2O_PER_CAT_curr != CPL_I20_PER_CAT_new):
        case.set_value("CPL_I2O_PER_CAT", CPL_I20_PER_CAT_new)
        append_status(f"xmlchange via MOM buildnml: CPL_I2O_PER_CAT={CPL_I20_PER_CAT_new}",
                      "CaseStatus")


    # 4. Create input.nml:
    input_nml_template = os.path.join(json_templates_dir, "input_nml.json")
    input_nml_srcmod = os.path.join(SourceMods_dir, "input.nml")
    input_nml_rundir = os.path.join(rundir, "input.nml")
    if "input.nml" in SourceMods_listdir:
        shutil.copy(input_nml_srcmod, input_nml_rundir)
    else:
        input_nml = FType_input_nml.from_json(input_nml_template)
        input_nml.write(input_nml_rundir, case)

    # 5. Create mom.input_data_list:
    input_data_list_template = os.path.join(json_templates_dir, "input_data_list.json")
    input_data_list_buildconf = os.path.join(Buildconf, "mom.input_data_list")
    input_data_list = FType_input_data_list.from_json(input_data_list_template)
    input_data_list.write(input_data_list_buildconf, case, MOM_input_final)

    # 6. Create marbl_in (if case is set up with ocean BGC)
    if  use_MARBL:
        # Read MARBL-specific case variables
        marbl_config         = case.get_value("MARBL_CONFIG")
        marbl_tracer_opts    = case.get_value("MARBL_TRACER_OPTS")
        marbl_hist_vert_grid = case.get_value("MARBL_HIST_VERT_GRID")

        # Determine which tracer modules are active in MARBL
        marbl_tracer_opt_dict = {}
        for marbl_tracer_opt in marbl_tracer_opts.split():
            temp_mto = marbl_tracer_opt.split("=")
            key, tmp_value = temp_mto[0], temp_mto[1]
            value = tmp_value
            if key in ["BASE_BIO_ON", "ABIO_DIC_ON"]:
                if tmp_value == "TRUE":
                    value = True
                elif tmp_value == "FALSE":
                    value = False
                else:
                    raise ValueError(f"{tmp_value} is not a valid value for {key} (can not convert to bool)")
            marbl_tracer_opt_dict[key] = value
        base_bio_on = marbl_tracer_opt_dict.get("BASE_BIO_ON", False)
        abio_dic_on = marbl_tracer_opt_dict.get("ABIO_DIC_ON", False)

        # Use MARBL-provided tool to generate marbl_in
        MARBL_dir = os.path.join(srcroot, "components", "mom", "externals", "MARBL")
        MARBL_settings = MARBL_settings_for_MOM(MARBL_dir, caseroot, base_bio_on, abio_dic_on,
                                                ocn_grid, run_type, continue_run, marbl_config)
        MARBL_settings.write_settings_file(os.path.join(rundir, "marbl_in"))

    # 7. Create diag_table:
    diag_table_rundir = os.path.join(rundir, "diag_table")
    unresolved_diag_table_confdir = os.path.join(momconfdir, "diag_table.unresolved")
    if "diag_table" in SourceMods_listdir:
        # A resolved diag_table is provided in SourceMods. Directly copy it to rundir.
        expect(
            "diag_table.unresolved" not in SourceMods_listdir,
            "Cannot provide both resolved and unresolved diag_table in SourceMods!",
        )
        diag_table_srcmod = os.path.join(SourceMods_dir, "diag_table")
        shutil.copy(diag_table_srcmod, diag_table_rundir)
        # remove unresolved diag_table to avoid conflicting resolved and unresolved versions
        if os.path.exists(unresolved_diag_table_confdir):
            os.remove(unresolved_diag_table_confdir)
    else:
        if "diag_table.unresolved" in SourceMods_listdir:
            # An unresolved diag_table is provided in SourceMods. Directly copy it to momconf.
            unresolved_diag_table_srcmod = os.path.join(
                SourceMods_dir, "diag_table.unresolved"
            )
            shutil.copy(unresolved_diag_table_srcmod, unresolved_diag_table_confdir)
        else:
            # Create an unresolved diag_table in momconf using the template
            diag_table_template = os.path.join(json_templates_dir, "diag_table.json")
            unresolved_diag_table = FType_diag_table.from_json(diag_table_template)
            if use_MARBL:
                # Make sure that momconfdir exists. If not, make it:
                if not os.path.exists(momconfdir):
                    os.makedirs(momconfdir)
                MARBL_diag_table_json = os.path.join(momconfdir, "diag_table_MARBL.json")
                # For now, user has no control over lMARBL_output_all
                # TODO: mimic what is done in POP and allow it via user_nl_mom?
                lMARBL_output_all = case.get_value("TEST")
                # Include ALT_CO2 diagnostics if atm_co2_opt and atm_alt_co2_opt differ
                # (or if they are both "constant" but atm_co2_const != atm_alt_co2_const)
                if "ATM_CO2_OPT" in MOM_input_final._data["Global"]:
                    atm_co2_opt = MOM_input_final._data["Global"]["ATM_CO2_OPT"]["value"].strip().lower().replace('"', "")
                    try:
                        atm_alt_co2_opt = MOM_input_final._data["Global"]["ATM_ALT_CO2_OPT"]["value"].strip().lower().replace('"', "")
                    except:
                        atm_alt_co2_opt = "constant"
                    if (atm_co2_opt == atm_alt_co2_opt):
                        if atm_co2_opt == "constant":
                            lMARBL_output_alt_co2 = (MOM_input_final._data["Global"]["ATM_CO2_CONST"]["value"] !=
                                                    MOM_input_final._data["Global"]["ATM_ALT_CO2_CONST"]["value"])
                        else:
                            lMARBL_output_alt_co2 = False
                    else:
                        lMARBL_output_alt_co2 = True
                else:
                    lMARBL_output_alt_co2 = False
                generate_diag_table_MARBL(caseroot, MARBL_settings, SourceMods_dir, momconfdir, MARBL_dir,
                                          MARBL_diag_table_json, marbl_hist_vert_grid, lMARBL_output_all,
                                          lMARBL_output_alt_co2, ice_ncat, marbl_diag_mode)
                if marbl_diag_mode != 'none':
                    unresolved_diag_table.append(FType_diag_table.from_json(MARBL_diag_table_json))

            unresolved_diag_table.write(
                unresolved_diag_table_confdir, case, MOM_input_final
            )
        # Resolve unresolved diag_table in momconf and write it to rundir
        FType_diag_table.resolve(
            unresolved_diag_table_confdir, diag_table_rundir, casename
        )
    
    # Sanity checks after all input files are generated.
    postchecks(case, MOM_input_final)


def init_MOM_override(rundir, inst_suffix):
    # Create an empty MOM_override:
    with open(os.path.join(rundir, f"MOM_override{inst_suffix}"), "w") as MOM_override:
        MOM_override.write(
            "! WARNING: DO NOT EDIT this file! Any user change made in this file will be\n"
            + "!          overriden. This file is automatically generated. MOM6 parameter\n"
            + "!          changes may be made via SourceMods or user_nl_mom.\n"
            + "!-------------------------------------------------------------------------\n\n"
        )


def process_user_nl_mom(case, inst_suffix):
    """Calls the appropriate MOM_RPS functions to parse user_nl_mom and create MOM_override."""
    caseroot = case.get_value("CASEROOT")
    rundir = case.get_value("RUNDIR")

    user_nl_mom = FType_MOM_params.from_MOM_input(
        os.path.join(caseroot, f"user_nl_mom{inst_suffix}")
    )

    # copy the user_nl_mom parameters into MOM_override:
    if len(user_nl_mom.data) > 0:

        # check if a copy of MOM_override is provided in SourceMods:
        SourceMods_dir = os.path.join(caseroot, "SourceMods", "src.mom")
        if f"MOM_override{inst_suffix}" in os.listdir(SourceMods_dir):
            raise SystemExit(
                "ERROR: Cannot provide parameter changes via both SourceMods and user_nl_mom!"
            )

        # parse the MOM_input file staged in rundir:
        MOM_input_rundir = FType_MOM_params.from_MOM_input(
            os.path.join(rundir, f"MOM_input{inst_suffix}")
        )

        # Write MOM_override (based on data from user_nl_mom)
        user_nl_mom.write(
            output_path=os.path.join(rundir, f"MOM_override{inst_suffix}"),
            output_format="MOM_override",
            def_params=MOM_input_rundir,
        )


def _copy_input_files(case, dest_dir, inst_suffixes):
    """Saves copies of MOM6 input files in momconf directory for the record."""
    rundir = case.get_value("RUNDIR")
    if not os.path.isdir(dest_dir):
        os.makedirs(dest_dir)

    for inst_suffix in inst_suffixes:
        for filename in ["MOM_input", "MOM_override"]:
            shutil.copy(os.path.join(rundir, filename + inst_suffix), dest_dir)
    for filename in [
        "diag_table",
        "input.nml",
    ]:
        shutil.copy(os.path.join(rundir, filename), dest_dir)

def generate_diag_table_MARBL(caseroot, MARBL_settings, SourceMods_dir, momconfdir, MARBL_dir, MARBL_diag_table_json,
                              marbl_hist_vert_grid, lMARBL_output_all, lMARBL_output_alt_co2, ice_ncat, diag_mode):
    """
    Create Buildconf/momconf/diag_table_MARBL.json

    If diag_table_MARBL.json is in SourceMods, use that version.
    Otherwise, generate it from Buildconf/momconf/MARBL_diagnostics
    (If MARBL_diagnostics is in SourceMods, use that version instead.)
    """
    # 1. Check for diag_table_MARBL.json in SourceMods
    srcmods_version = os.path.join(SourceMods_dir, "diag_table_MARBL.json")
    if os.path.isfile(srcmods_version):
        shutil.copy(srcmods_version, MARBL_diag_table_json)
        return

    # 2. Create MARBL_diagnostics
    #    (a) We need to generate a MARBL_diagnostics_for_MOM object
    #        It's necessary for generating MARBL_diagnostics, but
    #        even if we copy MARBL_diagnostics from SourceMods the
    #        object contains important information about the vertical
    #        dimension of MARBL's diagnostics
    MARBL_diagnostics = MARBL_diagnostics_for_MOM(MARBL_dir, caseroot, MARBL_settings)

    #    (b) Check for file in SourceMods, otherwise generate it
    srcmods_version = os.path.join(SourceMods_dir, "MARBL_diagnostics")
    MARBL_diags_buildconf = os.path.join(momconfdir, "MARBL_diagnostics")
    if os.path.isfile(srcmods_version):
        shutil.copy(srcmods_version, MARBL_diags_buildconf)
    else:
        # (i) Create MARBL_diagnostics with MOM-generated diagnostics
        write_MARBL_diagnostics_file(MARBL_settings.get_tracer_names(),
                                     MARBL_settings.get_autotroph_names(),
                                     MARBL_settings.get_zooplankton_names(),
                                     MARBL_settings.get_autotroph_names(calcifier_only=True),
                                     MARBL_settings.get_ladjust_bury_coeff(),
                                     MARBL_diags_buildconf,
                                     ice_ncat,
                                     diag_mode,
                                    )
        # (ii) append MARBL diagnostics to MARBL_diagnostics
        MARBL_diagnostics.write_diagnostics_file(MARBL_diags_buildconf,
                                                 diag_mode=diag_mode,
                                                 append=True)

    # 3. We need a list of all the 2D fields in MARBL_diagnostics
    #    because those fields use the ocean_model module rather than
    #    ocean_model_z

    #    (a) get list of 2D diagnostics computed in MOM6
    diag2D_list = get_2D_vars_from_MARBL_diagnostics(MARBL_diags_buildconf)

    #    (b) append list of 2D diagnostics computed in MARBL
    for varname in MARBL_diagnostics.MARBL_diagnostic_dict.diagnostics_dict:
        if MARBL_diagnostics.MARBL_diagnostic_dict.diagnostics_dict[varname]["vertical_grid"] == "none":
            diag2D_list.append(varname)

    # 4. Generate diag_table based on contents of MARBL_diagnostics
    #    and knowledge of which diags are 2D
    diagnostics_to_diag_table(MARBL_diags_buildconf, MARBL_diag_table_json, diag2D_list, marbl_hist_vert_grid,
                              lMARBL_output_all, lMARBL_output_alt_co2)

def prechecks(case, inst_suffixes):
    """Performs prechecks to ensure that necessary restart files and rpointer files are present in rundir."""

    rundir = case.get_value("RUNDIR")
    run_type = case.get_value("RUN_TYPE")
    continue_run = case.get_value("CONTINUE_RUN")
    get_refcase = case.get_value("GET_REFCASE")
    run_refcase = case.get_value("RUN_REFCASE")
    run_refdate = case.get_value("RUN_REFDATE")
    run_reftod = case.get_value("RUN_REFTOD")
    testcase = case.get_value("TEST")
    
    # check if rpointer files are present in rundir
    if not testcase and (run_type != "startup" or continue_run):
        for inst_suffix in inst_suffixes:
            rpointer_pattern = (
                r"rpointer\.ocn" + inst_suffix + r"(\.\d{4}-\d{2}-\d{2}-\d{5})?$"
            )
            rpointer_files = [
                f for f in os.listdir(rundir) if re.match(rpointer_pattern, f)
            ]
            expect(
                len(rpointer_files) > 0,
                f"Missing rpointer files in rundir. Expected files with pattern {rpointer_pattern}.",
            )
        
    # check if the restart file is present in rundir
    if run_type in ["branch", "hybrid"] and not continue_run and not get_refcase:
        restart_file = os.path.join(rundir, f'./{run_refcase}.mom6.r.{run_refdate}-{run_reftod}.nc')
        assert os.path.exists(restart_file), f"Missing restart file {run_refcase}.mom6.r.{run_refdate}-{run_reftod}.nc in rundir."

def postchecks(case,  MOM_input_final):
    """Performs checks after input files are generated. To be called within prep_input() as a final step."""

    ntasks_ocn = case.get_value("NTASKS_OCN")
    niglobal = int(MOM_input_final._data["Global"]["NIGLOBAL"]['value'])
    njglobal = int(MOM_input_final._data["Global"]["NJGLOBAL"]['value'])

    # Check whether given NTASKS_OCN is feasible by attempting to compute domain decomposition
    niproc, njproc = MOM_define_layout(niglobal, njglobal, ntasks_ocn)
    try:
        mpp_compute_extent(1, niglobal, niproc)
        mpp_compute_extent(1, njglobal, njproc)
    except AssertionError as e:
        raise SystemExit(
            f"ERROR: {e}\n"
            f"  NTASKS_OCN={ntasks_ocn}, NIGLOBAL={niglobal}, NJGLOBAL={njglobal}\n"
            f"  Domain decomposition: NIPROC={niproc}, NJPROC={njproc}\n"
            f"  Unable to find a feasible MOM6 domain decomposition! Try a different NTASKS_OCN."
        )

# pylint: disable=unused-argument
###############################################################################
def buildnml(case, caseroot, compname):
    ###############################################################################
    """Build the MOM6 namelist"""

    # Build the component namelist
    if compname != "mom":
        raise AttributeError

    ninst = case.get_value("NINST_OCN")
    inst_suffixes = (
        ["_{:04d}".format(i + 1) for i in range(ninst)] if ninst > 1 else [""]
    )

    # prechecks
    prechecks(case, inst_suffixes)

    # prepare all input files
    prep_input(case, inst_suffixes)

    # save copies of input files in momconf
    caseroot = case.get_value("CASEROOT")
    momconfdir = os.path.join(caseroot, "Buildconf", "momconf")
    _copy_input_files(case, momconfdir, inst_suffixes)

    # save copies of input files in CaseDocs
    casedocsdir = os.path.join(caseroot, "CaseDocs")
    _copy_input_files(case, casedocsdir, inst_suffixes)


###############################################################################

def _main_func():

    caseroot = parse_input(sys.argv)
    with Case(caseroot) as case:
        buildnml(case, caseroot, "mom")


if __name__ == "__main__":
    _main_func()
