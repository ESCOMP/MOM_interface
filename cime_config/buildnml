#!/usr/bin/env python

"""MOM6 namelist creator
"""

# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os, shutil, sys, glob, stat, filecmp, imp

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

# The scope of the following path expansion is limited to this script only,
# and is needed to import MOM6 input file classes:
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)),"MOM_RPS"))

from standard_script_setup import *
from CIME.case import Case
from CIME.nmlgen import NamelistGenerator
from CIME.utils import expect
from CIME.buildnml import create_namelist_infile, parse_input
from CIME.utils import run_cmd
from FType_MOM_params import FType_MOM_params
from FType_input_nml import FType_input_nml
from FType_input_data_list import FType_input_data_list
from FType_diag_table import FType_diag_table

logger = logging.getLogger(__name__)

# returns active components
def active_components(case):
    # query compset
    compset = case.get_value("COMPSET")
    # parse compset
    components = compset.split("_")[1:]
    # remove stub components
    components = [ x for x in components if "S" not in x[0] ]

    return components

def date_yyyymmddhh(case):
    run_start_date = case.get_value('RUN_STARTDATE').split('-')
    yyyy = int(run_start_date[0])
    mm = int(run_start_date[1])
    dd = int(run_start_date[2])
    run_start_tod = case.get_value('START_TOD')
    hh = int(run_start_tod)//3600
    return yyyy, mm, dd, hh

def prep_input(case, app):
    """ Generates out-of-the-box versions of MOM6 input files including MOM_input, MOM_override, diag_table
    input.nml.mom, and mom.input_data_list, inside the run directory. If any of these input files are provided
    in SourceMods, those versions will be copied to run directory instead."""

    Buildconf = case.get_value("CASEBUILD")
    rundir = case.get_value("RUNDIR")
    comp_root_dir_ocn = case.get_value("COMP_ROOT_DIR_OCN")

    if os.path.exists(os.path.join(comp_root_dir_ocn,"cime_config")):
        config_root = comp_root_dir_ocn
    else:
        config_root = os.path.join(comp_root_dir_ocn,"cime")

    caseroot = case.get_value("CASEROOT")
    SourceMods_dir = os.path.join(caseroot,"SourceMods","src.mom")

    # Make sure that rundir exists. If not, make it:
    if not os.path.exists(rundir):
        os.makedirs(rundir)

    # Parse json files and create MOM6 input files in rundir
    json_templates_dir = os.path.join(config_root,"param_templates","json")

    # 1. Create MOM_input:
    if "MOM_input" in os.listdir(SourceMods_dir):
        if 's2s' in app:
            run_cmd("cp "+os.path.join(SourceMods_dir,"MOM_input")+" "+os.path.join(rundir,"INPUT"))
        else:
            run_cmd("cp "+os.path.join(SourceMods_dir,"MOM_input")+" "+rundir)
    else:
        MOM_input_src = os.path.join(json_templates_dir, "MOM_input.json")
        MOM_input_dest = os.path.join(rundir,"MOM_input")
        MOM_input = FType_MOM_params.from_json(MOM_input_src)
        MOM_input.write(output_path=MOM_input_dest, output_format="MOM_input", case=case)

    # 2. Create MOM_override:
    user_nl_mom = FType_MOM_params.from_MOM_input(os.path.join(caseroot,"user_nl_mom"))
    if "MOM_override" in os.listdir(SourceMods_dir):
        assert len(user_nl_mom.data)==0, "Cannot provide parameter changes via both SourceMods and user_nl_mom!"
        if 's2s' in app:
            run_cmd("cp "+os.path.join(SourceMods_dir,"MOM_override")+" "+os.path.join(rundir,"INPUT"))
        else:
            run_cmd("cp "+os.path.join(SourceMods_dir,"MOM_override")+" "+rundir)
    else:
        init_MOM_override(rundir)
        process_user_nl_mom(case)

    # 3. Read in final versions of MOM_input and MOM_override, so as to use them when inferring
    #    values of expandable variables in the templates of below MOM6 input files.
    if 's2s' in app and os.path.isfile(os.path.join(rundir,"INPUT","MOM_input")):
        MOM_input_final = FType_MOM_params.from_MOM_input(os.path.join(rundir,"INPUT","MOM_input"))
        MOM_override_final = FType_MOM_params.from_MOM_input(os.path.join(rundir,"INPUT","MOM_override"))
        MOM_input_final.append(MOM_override_final)
    else:
        MOM_input_final = FType_MOM_params.from_MOM_input(os.path.join(rundir,"MOM_input"))
        MOM_override_final = FType_MOM_params.from_MOM_input(os.path.join(rundir,"MOM_override"))
        MOM_input_final.append(MOM_override_final)

    # 4. Create input.nml.mom:
    if "input.nml.mom" in os.listdir(SourceMods_dir):
        run_cmd("cp "+os.path.join(SourceMods_dir,"input.nml.mom")+" "+rundir)
    else:
        input_nml_src = os.path.join(json_templates_dir, "input_nml.json")
        input_nml_dest = os.path.join(rundir,"input.nml.mom")
        input_nml = FType_input_nml.from_json(input_nml_src)
        input_nml.write(input_nml_dest, case)

    # 5. Create mom.input_data_list:
    if 's2s' in app:
        din_loc_ic = case.get_value("DIN_LOC_IC")
        rundir = case.get_value("RUNDIR")

        # Query date and time
        yyyy, mm, dd, hh = date_yyyymmddhh(case)

        # Set data directory
        icdir = os.path.join(din_loc_ic,"{:04d}{:02d}".format(yyyy,mm),"{:04d}{:02d}{:02d}".format(yyyy,mm,dd))

        f_lst = ['All_edits.nc',
                 'geothermal_davies2013_v1.nc',
                 'hycom1_75_800m.nc',
                 'interpolate_zgrid_40L.nc',
                 'layer_coord.nc',
                 'MOM6_IC_TS.nc',
                 'MOM_channels_global_025',
                 'ocean_hgrid.nc',
                 'ocean_mask.nc',
                 'ocean_mosaic.nc',
                 'ocean_topog.nc',
                 'runoff.daitren.clim.1440x1080.v20180328.nc',
                 'seawifs-clim-1997-2010.1440x1080.v20180328.nc',
                 'tidal_amplitude.v20140616.nc',
                 'topog.nc',
                 'MOM_layout']
        for f in f_lst:
            print os.path.join(icdir,f)
            if os.path.isfile(os.path.join(icdir,f)):
                safe_copy(os.path.join(icdir,f),os.path.join(rundir,"INPUT",f))
    else:
        input_data_list_src = os.path.join(json_templates_dir, "input_data_list.json")
        input_data_list_dest = os.path.join(Buildconf,"mom.input_data_list")
        input_data_list = FType_input_data_list.from_json(input_data_list_src)
        input_data_list.write(input_data_list_dest, case, MOM_input_final)

    # 6. Create diag_table:
    if "diag_table" in os.listdir(SourceMods_dir):
        run_cmd("cp "+os.path.join(SourceMods_dir,"diag_table.mom")+" "+rundir)
    else:
        diag_table_src = os.path.join(json_templates_dir, "diag_table.json")
        diag_table_dest = os.path.join(rundir,"diag_table.mom")
        diag_table = FType_diag_table.from_json(diag_table_src)
        diag_table.write(diag_table_dest, case)

def init_MOM_override(rundir):
    # Create an empty MOM_override:
    with open(os.path.join(rundir,"MOM_override"), 'w') as MOM_override:
        MOM_override.write(\
            '! WARNING: DO NOT EDIT this file! Any user change made in this file will be\n'+\
            '!          overriden. This file is automatically generated. MOM6 parameter\n'+\
            '!          changes may be made via SourceMods or user_nl_mom.\n'+\
            '!-------------------------------------------------------------------------\n\n')

def process_user_nl_mom(case):
    """ Calls the appropriate MOM_RPS functions to parse user_nl_mom and create MOM_override."""
    caseroot = case.get_value("CASEROOT")
    rundir   = case.get_value("RUNDIR")

    user_nl_mom = FType_MOM_params.from_MOM_input(os.path.join(caseroot,"user_nl_mom"))

    # copy the user_nl_mom parameters into MOM_override:
    if len(user_nl_mom.data)>0:

        # check if a copy of MOM_override is provided in SourceMods:
        SourceMods_dir = os.path.join(caseroot,"SourceMods","src.mom")
        if "MOM_override" in os.listdir(SourceMods_dir):
            raise SystemExit("ERROR: Cannot provide parameter changes via both SourceMods and user_nl_mom!")

        # parse the MOM_input file staged in rundir:
        MOM_input_rundir = FType_MOM_params.from_MOM_input(os.path.join(rundir,"MOM_input"))

        # Write MOM_override (based on data from user_nl_mom)
        user_nl_mom.write(output_path = os.path.join(rundir,"MOM_override"),
                          output_format = "MOM_override",
                          def_params = MOM_input_rundir)

def _copy_files_to_momconf(case, app):
    """ Saves copies of MOM6 input files in momconf directory for the record."""
    caseroot = case.get_value("CASEROOT")
    rundir   = case.get_value("RUNDIR")
    momconfdir  = os.path.join(caseroot, "Buildconf", "momconf")
    if not os.path.isdir(momconfdir):
        os.makedirs(momconfdir)

    for filename in ["MOM_input", "MOM_override"]:
        if 's2s' in app:
            if os.path.isfile(os.path.join(rundir,"INPUT",filename)):
                shutil.copy(os.path.join(rundir,"INPUT",filename), momconfdir)
        else:
            shutil.copy(os.path.join(rundir,filename), momconfdir)

    for filename in ["diag_table.mom", "input.nml.mom"]:
        shutil.copy(os.path.join(rundir,filename), momconfdir)

# pylint: disable=too-many-arguments,too-many-locals,too-many-branches,too-many-statements
###############################################################################
def buildnml(case, caseroot, compname):
###############################################################################
    """Build the MOM6 namelist """

    # Build the component namelist
    if compname != "mom":
        raise AttributeError

    # Set app name
    components = active_components(case)
    if any('ufsatm' in x for x in components):
        app = "s2s"
    else:
        app = "cesm"

    # prepare all input files
    prep_input(case, app)

    # save copies of input files in momconf
    _copy_files_to_momconf(case, app)

    return

###############################################################################
def _main_func():

    caseroot = parse_input(sys.argv)
    with Case(caseroot) as case:
        buildnml(case, caseroot, "mom")

if __name__ == "__main__":
    _main_func()
