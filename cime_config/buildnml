#!/usr/bin/env python

"""MOM6 namelist creator
"""

# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os, shutil, sys, glob, stat, filecmp, imp

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.nmlgen import NamelistGenerator
from CIME.utils import expect
from CIME.buildnml import create_namelist_infile, parse_input
from CIME.utils import run_cmd

logger = logging.getLogger(__name__)

# prepares the input files of a case and places in rundir:
def prep_input(case):
    Buildconf       = case.get_value("CASEBUILD")
    rundir          = case.get_value("RUNDIR")
    srcroot         = case.get_value("SRCROOT")

    # The scope of the following path expansion is limited to this script only,
    # and is needed to import MOM6 input file classes:
    sys.path.append(os.path.join(srcroot,"components","mom","cime_config","MOM_RPS"))
    from FType_MOM_params import FType_MOM_params
    from FType_input_nml import FType_input_nml
    from FType_input_data_list import FType_input_data_list
    from FType_diag_table import FType_diag_table

    # Make sure that rundir exists. If not, make it:
    if not os.path.exists(rundir):
        os.makedirs(rundir)

    # Parse json files and create MOM6 input files in rundir
    json_templates_dir = os.path.join(srcroot,"components","mom","param_templates","json")

    # Create MOM_input:
    MOM_input_src = os.path.join(json_templates_dir, "MOM_input.json")
    MOM_input_dest = os.path.join(rundir,"MOM_input")
    MOM_input = FType_MOM_params(MOM_input_src)
    MOM_input.write(MOM_input_dest, case)

    # Create input.nml:
    input_nml_src = os.path.join(json_templates_dir, "input_nml.json")
    input_nml_dest = os.path.join(rundir,"input.nml")
    input_nml = FType_input_nml(input_nml_src)
    input_nml.write(input_nml_dest, case)

    # Create mom.input_data_list:
    input_data_list_src = os.path.join(json_templates_dir, "input_data_list.json")
    input_data_list_dest = os.path.join(Buildconf,"mom.input_data_list")
    input_data_list = FType_input_data_list(input_data_list_src)
    input_data_list.write(input_data_list_dest, case)

    # Create diag_table:
    diag_table_src = os.path.join(json_templates_dir, "diag_table.json")
    diag_table_dest = os.path.join(rundir,"diag_table")
    diag_table = FType_diag_table(diag_table_src)
    diag_table.write(diag_table_dest, case)

    # Create an empty MOM_override:
    with open(os.path.join(rundir,"MOM_override"), 'w') as MOM_override:
        MOM_override.write('! WARNING: DO NOT EDIT this file! Any user change made in this file will be\n')
        MOM_override.write('!          overriden. This file is automatically generated. MOM6 parameter\n')
        MOM_override.write('!          changes may be made via SourceMods or user_nl_mom.\n')
        MOM_override.write('!-------------------------------------------------------------------------\n\n')


def process_SourceMods(case):
    caseroot = case.get_value("CASEROOT")
    rundir   = case.get_value("RUNDIR")
    replaceable = ["diag_table", "input.nml", "MOM_input", "MOM_override"]

    # If an input file normally copied from the templates directory is also provided by the user
    # in SourceMods/src.mom/, copy the version provided by the user in SourceMods.src.mom into
    # RUNDIR and so overwrite the default file.
    SourceMods_dir = os.path.join(caseroot,"SourceMods","src.mom")
    for filename in os.listdir(SourceMods_dir):
        if filename in replaceable:
            run_cmd("cp "+os.path.join(SourceMods_dir,filename)+" "+rundir)


def process_user_nl_mom(case):
    caseroot = case.get_value("CASEROOT")
    rundir   = case.get_value("RUNDIR")
    srcroot  = case.get_value("SRCROOT")

    # parse the parameters in user_nl_mom:
    sys.path.append(os.path.join(srcroot,"components","mom","cime_config","MOM_RPS"))
    from FType_MOM_params import FType_MOM_params
    user_nl_mom = FType_MOM_params(os.path.join(caseroot,"user_nl_mom"),
                                    input_format="MOM_input", output_format="MOM_override")
    user_nl_mom.read()

    # copy the user_nl_mom parameters into MOM_override:
    if len(user_nl_mom.data)>0:

        # check if a copy of MOM_override is provided in SourceMods:
        SourceMods_dir = os.path.join(caseroot,"SourceMods","src.mom")
        if "MOM_override" in os.listdir(SourceMods_dir):
            raise SystemExit("ERROR: Cannot provide parameter changes via both SourceMods and user_nl_mom!")

        # parse the MOM_input file staged in rundir:
        MOM_input_rundir = FType_MOM_params(os.path.join(rundir,"MOM_input"),input_format="MOM_input")

        # Write MOM_override (based on data from user_nl_mom)
        user_nl_mom.write(os.path.join(rundir,"MOM_override"), def_params=MOM_input_rundir)


# pylint: disable=too-many-arguments,too-many-locals,too-many-branches,too-many-statements
###############################################################################
def buildnml(case, caseroot, compname):
###############################################################################
    """Build the MOM6 namelist """

    # Build the component namelist
    if compname != "mom":
        raise AttributeError

    # prepare all input files
    prep_input(case)

    # process the SourceMods
    process_SourceMods(case)

    # process the SourceMods
    process_user_nl_mom(case)

    return

###############################################################################
def _main_func():

    caseroot = parse_input(sys.argv)
    with Case(caseroot) as case:
        buildnml(case, caseroot, "mom")

if __name__ == "__main__":
    _main_func()
