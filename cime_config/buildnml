#!/usr/bin/env python

"""MOM6 namelist creator
"""

# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os, shutil, sys, glob, stat, filecmp, imp

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.nmlgen import NamelistGenerator
from CIME.utils import expect
from CIME.buildnml import create_namelist_infile, parse_input
from CIME.utils import run_cmd

logger = logging.getLogger(__name__)

# prepares the input files of a case and places in rundir:
def prep_input(case):
    casename        = case.get_value("CASE")
    Buildconf       = case.get_value("CASEBUILD")
    rundir          = case.get_value("RUNDIR")
    gridname        = case.get_value("GRID")
    atm_gridname    = case.get_value("ATM_GRID")
    ocn_gridname    = case.get_value("OCN_GRID")
    srcroot         = case.get_value("SRCROOT")
    din_loc_root    = case.get_value("DIN_LOC_ROOT")
    input_files     = ["diag_table", "input.nml", "MOM_input", "MOM_override"]

    # Make sure that rundir exists. If not, make it:
    if not os.path.exists(rundir):
        os.makedirs(rundir)

    # check if input file templates are available for the given resolution:
    resolution = None
    if (atm_gridname=="T62" and ocn_gridname=="gx1v6"):
        resolution = "T62_g16"
    elif (atm_gridname=="T62" and ocn_gridname=="tx0.66v1"):
        resolution = "T62_t061"
    elif (atm_gridname=="0.9x1.25" and ocn_gridname=="gx1v6"):
        resolution = "f09_g16"
    expect(resolution != None, "Couldn't find input files for %s" % (gridname))

    # copy template input files:
    logger.info("Copying input files for %s\n"%(resolution))
    input_templates_dir = os.path.join(srcroot,"components","mom","input_templates",resolution)
    for input_file_name in input_files:
        input_file_path = os.path.join(input_templates_dir,input_file_name)
        if not os.path.exists(input_file_path):
            expect(False, "Couldn't find input files at "+input_file_path)

        run_cmd("cp "+input_file_path+" "+rundir)

    # process diag_table: (replace all the instances of "CASENAME" in data_table with the actual case name)
    with open(os.path.join(rundir,"diag_table"), 'r') as diag_table:
        diag_table_data = diag_table.read().replace('CASENAME',casename)
    with open(os.path.join(rundir,"diag_table"), 'w') as diag_table:
        diag_table.write(diag_table_data)

    # process MOM_input: (replace all the instances of "DIN_LOC_ROOT" with the local input directory)
    with open(os.path.join(rundir,"MOM_input"), 'r') as MOM_input:
         inputdir = os.path.join(din_loc_root,'ocn','mom',ocn_gridname)
         MOM_input_data = MOM_input.read().replace('DIN_LOC_ROOT',inputdir)
    with open(os.path.join(rundir,"MOM_input"), 'w') as MOM_input:
        MOM_input.write(MOM_input_data)

    # generate input_data_list:
    with open(os.path.join(input_templates_dir,"mom.input_data_list"), 'r') as input_data_list:
        idl_data = input_data_list.read().replace('DIN_LOC_ROOT',din_loc_root)\
                                         .replace('OCN_GRID',ocn_gridname)
    with open(os.path.join(Buildconf,"mom.input_data_list"), 'w') as input_data_list:
        input_data_list.write(idl_data)



# pylint: disable=too-many-arguments,too-many-locals,too-many-branches,too-many-statements
###############################################################################
def buildnml(case, caseroot, compname):
###############################################################################
    """Build the MOM6 namelist """

    # Build the component namelist
    if compname != "mom":
        raise AttributeError

    # prepare all input files
    prep_input(case)

    return

###############################################################################
def _main_func():

    caseroot = parse_input(sys.argv)
    with Case(caseroot) as case:
        buildnml(case, caseroot, "mom")

if __name__ == "__main__":
    _main_func()

